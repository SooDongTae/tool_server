name: Java CD with Gradle

on:
  push:
    branches: [ master ]

jobs:
  CD:
    runs-on: ubuntu-latest
    steps:
      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin' # https://github.com/actions/setup-java

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      ## text application build
      - name: Test with Gradle
        run: ./gradlew test

      ## docker build & push
      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

      ## deploy
      - name: Deploy
        uses: appleboy/ssh-action@master
        id: deploy-prod
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_NAME }}
          key: ${{ secrets.GCP_KEY }}
          envs: GITHUB_SHA
          script: |
            
            sudo chmod 666 /var/run/docker.sock
            
            cd tool-server
            git pull origin master
            
            rm -rf .env
            touch .env
            echo DB_NAME=${{ secrets.DB_NAME_USERNAME }} >> .env
            echo DB_USERNAME=${{ secrets.DB_NAME_USERNAME }} >> .env
            echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
            echo DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} >> .env
            echo DOCKER_REPO=${{ secrets.DOCKER_REPO }} >> .env
            
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            docker-compose up -d
            docker image prune -f